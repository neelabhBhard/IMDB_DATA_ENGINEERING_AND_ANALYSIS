{
	"name": "bridgeTitle",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DimTitlenew",
						"type": "DatasetReference"
					},
					"name": "DimTitle"
				},
				{
					"dataset": {
						"referenceName": "dimgenre",
						"type": "DatasetReference"
					},
					"name": "dimGenre"
				},
				{
					"dataset": {
						"referenceName": "STGTITLEBASICV2",
						"type": "DatasetReference"
					},
					"name": "StgTitleBasicV2"
				},
				{
					"dataset": {
						"referenceName": "BridgeTitleGenere",
						"type": "DatasetReference"
					},
					"name": "BridgeTitleGenre"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "BridgeTitleGenere",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "lookupDimTitle"
				},
				{
					"name": "lookupDimGenre"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string",
				"}",
				"source(output(",
				"          TITLEKEY as decimal(10,0),",
				"          TCONST as string,",
				"          TITLETYPE as string,",
				"          PRIMARYTITLE as string,",
				"          ORIGINALTITLE as string,",
				"          ISADULT as string,",
				"          STARTYEAR as string,",
				"          ENDYEAR as string,",
				"          RUNTIMEMINUTES as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     partitionBy('roundRobin', 2)) ~> DimTitle",
				"source(output(",
				"          GENREKEY as decimal(10,0),",
				"          GENRENAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> dimGenre",
				"source(output(",
				"          TCONST as string,",
				"          TITLETYPE as string,",
				"          PRIMARYTITLE as string,",
				"          ORIGINALTITLE as string,",
				"          ISADULT as string,",
				"          STARTYEAR as string,",
				"          ENDYEAR as string,",
				"          RUNTIMEMINUTES as string,",
				"          GENRES as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> StgTitleBasicV2",
				"source(output(",
				"          BRIDGEKEY as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select NVL(Max(BRIDGEKEY),0) as BRIDGEKEY from IMDB_SCHEMA.BRIDGETITLEGENRE',",
				"     format: 'query') ~> BridgeTitleGenre",
				"StgTitleBasicV2, DimTitle lookup(trim(lower(StgTitleBasicV2@TCONST)) == trim(lower(DimTitle@TCONST)),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     partitionBy('roundRobin', 2),",
				"     broadcast: 'auto')~> lookupDimTitle",
				"lookupDimTitle, dimGenre lookup(GENRES == GENRENAME,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDimGenre",
				"lookupDimGenre, BridgeTitleGenre join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(BRIDGEKEY,",
				"          TITLEKEY,",
				"          GENREKEY),",
				"     CountRow = count(TITLEKEY)) ~> aggregate1",
				"aggregate1 keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(BRIDGEKEY = BRIDGEKEY+RowNum,",
				"          DI_JOB_ID = $DI_JOB_ID,",
				"          DI_CREATED_DT = currentDate(),",
				"          TITLEKEY = iif(isNull(TITLEKEY), 00, toInteger(TITLEKEY))) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BRIDGEKEY as decimal(10,0),",
				"          TITLEKEY as decimal(10,0),",
				"          GENREKEY as decimal(10,0),",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BRIDGEKEY,",
				"          TITLEKEY,",
				"          GENREKEY,",
				"          DI_JOB_ID,",
				"          DI_CREATED_DT",
				"     )) ~> sink1"
			]
		}
	}
}